type User {
	email: String! @unique(index: "userByEmail")
	role: String!
}

input RegisterInput {
	email: String!
	role: String!
	password: String!
}

input LoginInput {
	email: String!
	password: String!
}

type LoginResult @embedded {
	instance: User!
	secret: String!
}

type Project {
	name: String!
	events: [Event!] @relation
}

type EventDetails @embedded {
	agent: String!
	speed: String!
}

type Event {
	type: String!
	timestamp: Time!
	uri: String!
	page: String!
	details: EventDetails!
	project: Project! @relation
}

type Query {
	allUsers: [User!]
	allProjects: [Project!]
	allEvents: [Event!]
}

type Mutation {
	register(data: RegisterInput): User! @resolver(name: "register")
	login(data: LoginInput): LoginResult! @resolver(name: "login")
	logout(all: Boolean): Boolean! @resolver(name: "logout")
}
