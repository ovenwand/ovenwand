type User {
	email: String! @unique(index: "userByEmail")
	role: String!
}

input RegisterInput {
	email: String!
	role: String!
	password: String!
}

input LoginInput {
	email: String!
	password: String!
}

type LoginResult @embedded {
	instance: User!
	secret: String!
}

type Task {
	title: String!
	description: String

	size: Int!
	priority: Int!
	businessValue: Int!
	dueDate: Time

	schedule: String!
	done: Boolean!
	labels: [Label!] @relation
}

type Label {
	name: String!
	description: String
	tasks: [Task!] @relation
}

type Query {
	tasks: [Task!]
	findCurrentTask: Task @resolver(name: "findCurrentTask")
	findTasksByDueDate(fromDate: Time!, toDate: Time!): [Task] @resolver(name: "findTasksByDueDate")
	findTasksByLabel(labelID: ID!): [Task!] @resolver(name: "findTasksByLabel")

	labels: [Label!]
}

type Mutation {
	register(data: RegisterInput): User! @resolver(name: "register")
	login(data: LoginInput): LoginResult! @resolver(name: "login")
	logout(all: Boolean): Boolean! @resolver(name: "logout")
}
